<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zxhlovexm.github.io</id>
    <title>zxh</title>
    <updated>2020-03-09T14:21:41.137Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zxhlovexm.github.io"/>
    <link rel="self" href="https://zxhlovexm.github.io/atom.xml"/>
    <subtitle>Gridea </subtitle>
    <logo>https://zxhlovexm.github.io/images/avatar.png</logo>
    <icon>https://zxhlovexm.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, zxh</rights>
    <entry>
        <title type="html"><![CDATA[用斐波那契数列画银杏树]]></title>
        <id>https://zxhlovexm.github.io/post/shi-yong-fei-bo-na-qi-shu-lie-hua-yin-xing-shu/</id>
        <link href="https://zxhlovexm.github.io/post/shi-yong-fei-bo-na-qi-shu-lie-hua-yin-xing-shu/">
        </link>
        <updated>2020-03-09T11:43:00.000Z</updated>
        <content type="html"><![CDATA[<p>本人从<a href="https://mp.weixin.qq.com/s/4qGAMKpItY6JMaXx0ZFphg" target="_blank">教室工作室</a> 处学习了如何使用斐波那契数列画银杏树，再次感谢大佬的分享，不过在学习过程中，我发现了两个小问题，于是利用本篇文章来记述一下问题解决的过程，以备不时之需.</p>
<p>首先，文章中提到画银杏树的时候首先需要画银杏叶：</p>
<p><img src="https://zxhlovexm.github.io/post-images/1583759509961.png" alt="" loading="lazy"><br>
但是可以发现上述<strong>红圈处</strong>银杏叶填充时超出边界了，这是由于文章原作者使用turtle画银杏叶时的流程所致的，示意图如下：<br>
<img src="https://zxhlovexm.github.io/post-images/1583759515197.png" alt="" loading="lazy"><br>
如上图中所标记的顺序，原作者依次画了叶柄，左叶扇，右叶扇和叶顶部分，但是由于turtle的弧线函数是以圆的半径和弧线的度数作为参数进行描绘的，所以当最后不是一个封闭图形时就会有超出边界的填充，据此我进行了改进，示意图如下：<br>
<img src="https://zxhlovexm.github.io/post-images/1583759519745.png" alt="" loading="lazy"><br>
如上图中所标记的顺序，我改进后的流程为：<strong>叶柄-&gt;右叶扇-&gt;叶顶-&gt;左叶扇</strong>，可以看到如此一来画出的银杏叶就比之前的效果好多了。</p>
<p>其次，对于文章中提到的第二部分--画树干和树枝时使用到了斐波那契数列，这也是原文章的核心部分，具体内容在这里不过多阐述，链接在最上部，这里着重记述一下问题所在：<br>
<img src="https://zxhlovexm.github.io/post-images/1583759528070.png" alt="" loading="lazy"><br>
可以看到原作者使用<strong>传统的迭代法</strong>来生成斐波那契数列，这就存在当项数增多时生成速度慢效率低下的问题，所以针对这一点我查阅了相关资料，发现使用<strong>公式法</strong>时该算法的时间复杂度可以降至<strong>O(n)</strong>，这样一来算法的速度便可以勉强接受了，具体斐波那契数列的推导过程如下：<br>
<img src="https://zxhlovexm.github.io/post-images/1583759533086.jpg" alt="" loading="lazy"></p>
<p>最后，我将<strong>改进后的代码</strong>放在下面以供分享交流：</p>
<pre><code>    import turtle as lv
    import random
    from math import *
    #---画银杏叶-------start-------
    def leaf(x,y,node):
     til=lv.heading()
     i=random.random()
    
     #画银杏叶柄
     an=random.randint(10,180)
     ye=random.randint(6,9)/10
     lv.color(ye,ye*0.9,0)
     lv.fillcolor(ye+0.1,ye+0.05,0)
     lv.pensize(1)
     #lv.color('orange','yellow')
     #lv.pendown()
     lv.setheading(an+90)
     lv.forward(18*i)
    
    
     lv.begin_fill()
     #画银杏叶右叶扇面
     lv.circle(-12*i,120)
    
    
     #画银杏叶顶端
     lv.setheading(an+100)
     lv.circle(18*i,160)
    
     #画银杏叶左叶扇面
     lv.setheading(an+90-60)
     lv.circle(-12*i,120)
    
     lv.end_fill()
    
     lv.goto(x,y)
     lv.setheading(til)
     lv.pensize(node/2+1)
     #---画银杏叶-------end-------#
    
    
    #---画银杏树干和树枝-------start-------#
    
    #斐波那契数(迭代法）--&gt;（O(n^2))
    def Fibonacci_Recursion_tool(n):
        if n&lt;=0:
            return 0
        elif n==1:
            return 1
        else:
            return Fibonacci_Recursion_tool(n-1)+Fibonacci_Recursion_tool(n-2)
    
    #计算组合数
    def com(n,i):
        i=min(i,n-i)
        a=1
        b=1
        for m in range(1,i+1):
          a=a*m
          b=b*(n-m+1)
        return b/a
        
    #斐波那契数(公式法）--&gt;（O(n))
    def Fibonacci_Recursion_tool_2(n):
        if n&lt;=0:
            return 0
        elif n==1:
            return 1
        else:
            sum=0
            for i in range(1,n+1,2):
                sum=sum+com(n,i)*pow(5,(i-1)/2)
            return int(sum/pow(2,n-1))
    
    #斐波那契数列
    def Fibonacci_Recursion(n):
        result_list=[]
        for i in range(1,n+3):
            result_list.append(Fibonacci_Recursion_tool_2(i))
        return result_list
    
    print(Fibonacci_Recursion(10))
    
    def draw(node,length,level,yu,button):
        lv.pendown()
        t = cos(radians(lv.heading()+5)) / 8 + 0.25
        lv.pencolor(t*1.6, t*1.2, t*1.4)
        #lv.pencolor(&quot;gray&quot;)
        lv.pensize(node/1.2)        
        x = random.randint(0, 10)
        #lv.forward(length)  # 画树枝
        #yu[level] = yu[level] - 1
    
        if  level==top and x==5 :
           lv.forward(length)  # 画树枝
           yu[level] = yu[level] - 1
           c=random.randint(2,10)
           for i in range(1,c):
               leaf(lv.xcor(), lv.ycor(),node)
               # 添加0.3倍的飘落叶子
               if random.random() &gt;0.5:
                   lv.penup()
                   # 飘落
                   t1 = lv.heading()
                   an1 = -40 + random.random() * 40
                   lv.setheading(an1)
                   dis = int(800 * random.random() * 0.5 + 400 * random.random() * 0.3 + 200 * random.random() * 0.2)
                   lv.forward(dis)
                   lv.setheading(t1)
    
                   lv.right(90)
                   # 画叶子
                   leaf(lv.xcor(), lv.ycor(), node)
                   lv.left(90)
                   # 返回
                   t2 = lv.heading()
                   lv.setheading(an1)
                   lv.backward(dis)
                   lv.setheading(t2)
    
    
        elif level==top and x!=5 :
            lv.penup()
            lv.forward(length)
            #leaf(lv.xcor(),lv.ycor())# jump
    
        elif level&gt;3 and (x&gt;6) :
            lv.pendown()
            lv.forward(length)
            c = random.randint(4, 6)
           # leaf(lv.xcor(), lv.ycor())
            for i in range(3, c):
                leaf(lv.xcor(), lv.ycor(),node)
            leaf(lv.xcor(), lv.ycor(),node)
            button=1# jump&quot;&quot;&quot;
        else:
            lv.forward(length)  # 画树枝
            yu[level] = yu[level] -1
        if node&gt;0 and button==0:
        
            # 计算右侧分支偏转角度,在固定角度偏转增加一个随机的偏移量
            right = random.random() * 5 + 17
            # 计算左侧分支偏转角度,在固定角度偏转增加一个随机的偏移量
            left = random.random() * 20 + 19
            # 计算下一级分支的长度
            child_length = length * (random.random() * 0.25 + 0.7)
            # 右转一定角度,画右分支
            r=random.randint(0, 1)
            print(r)
            if r==1:
              lv.right(right)
              level = level + 1
              print(&quot;level&quot;,level)
            else:
              lv.left(right)
              level = level + 1
              print(&quot;level&quot;, level)
            draw(node - 1, child_length,level,yu,button)
    
            yu[level] = yu[level] +1
    
            if yu[level]&gt;1:
                # 左转一定角度，画左分支
    
                if r==1:
                   lv.left(right + left)
                   draw(node - 1, child_length, level, yu,button)
                   # 将偏转的角度，转回
                   lv.right(left)
                   print(&quot;yu&quot;, yu)
                   yu[level] = yu[level] - 1
                else:
                    lv.right(right + left)
                    draw(node - 1, child_length, level, yu,button)
                    # 将偏转的角度，转回
                    lv.left(left)
                    print(&quot;yu&quot;, yu)
                    yu[level] = yu[level] - 1
            else:
                if r==1:
                  lv.left(right + left)
                  lv.right(left)
                  print(&quot;yu&quot;, yu)
                else:
                    lv.right(right + left)
                    lv.left(left)
                    print(&quot;yu&quot;, yu)
        lv.penup()
        #退回到上一级节点顶部位置
        lv.backward(length)
    
    lv.hideturtle()     #隐藏lv
    lv.speed(0);        #设置画笔移动的速度，0-10 值越小速度越快
    #lv.tracer(0,0)      #设置动画的开关和延迟，均为0
    lv.penup()          #抬起画笔
    lv.left(90)         #默认方向为朝x轴的正方向，左转90度则朝上
    lv.backward(300)#设置lv的位置，朝下移动300
    top=13
    yu=Fibonacci_Recursion(top)
    yu.remove(yu[0])
    print(yu)
    button=0
    draw(top,120,0,yu,button)        #调用函数开始绘制
    lv.exitonclick()
</code></pre>
<p><strong>-- 站在巨人的肩膀上才能进步的更快，加油！</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://zxhlovexm.github.io/post/hello-gridea/</id>
        <link href="https://zxhlovexm.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>